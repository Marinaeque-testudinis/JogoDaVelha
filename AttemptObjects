import pip
import random, multiprocessing
import os, io
import numpy as np
from urllib.request import urlopen
from io import BytesIO

os.environ['SDL_VIDEODRIVER']='dummy'

pip.main(['install','pygame'])
pip.main(['install','IPython'])

import site
site.main()


import pygame, IPython
from pygame.locals import *

window = pygame.display.set_mode((1200,1200), pygame.SRCALPHA, depth=32)

def display_img(data):

    im = PIL.Image.frombyte('RGBA', (1200,1200), data)
    bio = BytesIO()
    im.save(bio, format='png')
    images.append(im)

class Grid: 

    def __init__(self):

        self.structure = np.array([[0,0,0],[0,0,0],[0,0,0]])
        self.check = False
        self.end = False
        self.winner = 0
        self.doRender = True
        namesOfGames = []

        img = urlopen("https://github.com/Marinaeque-testudinis/JogoDaVelha/blob/main/grid.png").read()
        image_file = io.BytesIO(img)
        self.grid_img = pygame.image.load(image_file).convert_alpha()

        X = urlopen("https://github.com/Marinaeque-testudinis/JogoDaVelha/blob/main/X.png").read()
        image_file = io.BytesIO(X)
        self.X_img = pygame.image.load(image_file).convert_alpha()

        O = urlopen("https://github.com/Marinaeque-testudinis/JogoDaVelha/blob/main/0.png").read()
        image_file = io.BytesIO(O)
        self.O_img = pygame.image.load(image_file).convert_alpha()
        
        self.game()

    def get_winner(self):
        return self.winner

    def isEnd(self):
        return self.end

    def mark(self,Mark,n,m):
        if not self.end:
            if n in [0,1,2] and m in [0,1,2]:
                if self.structure[n,m] == 0:
                    if Mark == 1:
                        self.structure[n,m] = 1
                        self.check = True
                    elif Mark == -1:
                        self.structure[n,m] = -1
                        self.check = True
            else:
                raise IndexError

    def render(self, surface:pygame.Surface):

        surface.blit(self.grid_img, pygame.Vector2(0,0))

        for i in range(0,2):
            for j in range(0,2):

                if self.structure[i][j] == 1:
                    surface.blit(self.X_img, pygame.Vector2((150 + 450*(i-1),150 + 450*(j-1))))

                elif self.structure[i][j] == -1:
                    surface.blit(self.O_img, pygame.Vector2(150 + 450*(i-1),150 + 450*(j-1)))
        

    def game(self, doRender=True):
        
        self.doRender = doRender
        if doRender:
            renderSurface = pygame.display.get_surface()

        if self.doRender:
            self.render(renderSurface)
            pygame.display.flip()        
            data = pygame.image.tostring(window, 'RGBA')        
            display_img(data) 

        line = []
        coll = []
        diag = []

        if self.check:
            if 0 not in self.structure[0] + self.structure[1] + self.structure[2]:
                for i in range(0,2):
                    line[i] = self.structure[i].sum()
                    coll[0] += self.structure[i][0]
                    coll[1] += self.structure[i][1]
                    coll[2] += self.structure[i][2]       
                    diag[0] += self.structure[i][i]
                    diag[1] += self.structure[i][2-i]

                l = set(line)
                c = set(coll)
                d = set(diag)

                if (3 in l.union(c,d)):
                    self.end = True
                    return 1

                elif (-3 in l.union(c,d)):
                    self.end = True
                    return -1
    @staticmethod
    def PlayTheGame(i):
        #we first choose a name for our game
        name = "game" + str(i)
        namesOfGames.append(name)
        #we create a Grid class
        locals()[name] = Grid()
        p1 = Player(True,True,False)
        p2 = Player(True,False,False)
        while True and not locals()[name].isEnd():

            if p1.isturn:
                play = p1.choice()
                locals()[name].mark(play[0],play[1],play[2])
                p1.updateturn()
                p2.updateturn()

            elif p2.isturn:
                play = p2.choice()
                locals()[name].mark(play[0],play[1],play[2])
                p1.updateturn()
                p2.updateturn()

class Player:

    def __init__(self, start, isturn, end):
        self.start = start
        self.isturn = isturn
        self.end = end
        while self.isturn:
            self.choice()

    def updateturn(self):
        self.isturn = not self.isturn

    def choice(self):
        choices = [random.choice([-1,1]), random.randint(0,2),random.randint(0,2)]
        self.updateturn()
        return choices

    

pygame.init()

nGames = 300

nThreads = 10

pool = multiprocessing.Pool(nThreads)

game = [PlayTheGame(i) for i in range(nGames)]

winners = pool.map(namesOfGames.get_winner(), game)

whoWon = {}
for i in range(len(nGames)):
    whoWon[game[i]] = winners[i]

images = []

last_image = images[-1]
for i in range(100):
  images.append(last_image)
  
images[0].save('game_animation.gif',
               save_all=True,
               append_images=images[1:],
               optimize = True,
               duration=10,
               loop=0)

with open('game_animation.gif','rb') as f:
    IPython.display.display(IPython.display.Image(data=f.read(), format='png'))

